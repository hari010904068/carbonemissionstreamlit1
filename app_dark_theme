import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import time
from sklearn.linear_model import LinearRegression

# Adding custom CSS to style sidebar and app layout
st.markdown(
    """
    <style>
    body {
        background: url('https://cdn.pixabay.com/photo/2015/12/01/20/28/forest-1072828_1280.jpg');
        background-size: cover;
        background-attachment: fixed;
        color: white;
    }
    .stApp {
        background-color: rgba(0, 100, 0, 0.4);
    }
    h1, h2, h3, h4, h5, h6 {
        color: #d0f0c0;
    }
    .stSidebar {
        background-color: black;
        color: white;
    }
    .css-1v3fvcr {
        background-color: black;
    }
    .css-1v3fvcr .stSlider > div > div {
        background-color: black;
        color: white;
    }
    .css-1v3fvcr .stSlider > div > div > div > div {
        background-color: black;
        color: white;
    }
    </style>
    """,
    unsafe_allow_html=True
)

# Set up Matplotlib to use a black background with white text
plt.style.use('dark_background')

# Title of the app
st.title("üå≤ Jenkins CI/CD Mock Execution - Carbon Emission Tracker üåø")
st.write("This app mocks Jenkins CI/CD execution time and CPU usage, simulates a model, and computes linear carbon emissions based on CPU and time usage.")

# Sidebar input widgets for mocking CI/CD parameters
st.sidebar.header("CI/CD Pipeline Mock Parameters")
execution_time = st.sidebar.slider("Execution Time (minutes)", 1, 120, 30)
cpu_usage = st.sidebar.slider("Average CPU Usage (%)", 1, 100, 50)

# Mock Jenkins CI/CD execution time and CPU usage data
data_points = 100
np.random.seed(42)
time_data = np.random.normal(loc=execution_time, scale=5, size=data_points).clip(1, 120)
cpu_data = np.random.normal(loc=cpu_usage, scale=10, size=data_points).clip(1, 100)

# Create a DataFrame for visualization
mock_data = pd.DataFrame({
    'Execution Time (minutes)': time_data,
    'CPU Usage (%)': cpu_data,
})

# Simulate training a model to compute carbon emissions
st.subheader("üìä Mock Data Generation and Model Training")
st.write("The model will compute carbon emissions based on CPU usage and execution time.")

# Simulate training time
progress_bar = st.progress(0)
train_time = 3  # in seconds
for i in range(train_time):
    progress_bar.progress((i + 1) / train_time)
    time.sleep(1)

# Linear model for carbon emissions
st.write("### Training a Linear Model for Carbon Emissions")
X = mock_data[['Execution Time (minutes)', 'CPU Usage (%)']]
y = X.sum(axis=1) * 0.05  # Simplified assumption: emissions = 0.05 * (CPU + Time)

model = LinearRegression()
model.fit(X, y)

mock_data['Carbon Emission (kg CO2)'] = model.predict(X)

# Visualization: Execution Time vs CPU Usage vs Carbon Emission
st.subheader("üîç CI/CD Execution and Carbon Emission Visualization")
st.write("Below is the visualization of mocked execution time, CPU usage, and corresponding carbon emissions:")

# Matplotlib chart visualization with black background
fig, ax = plt.subplots()

# Scatter plot with dark theme
scatter = ax.scatter(
    mock_data['Execution Time (minutes)'], 
    mock_data['CPU Usage (%)'], 
    c=mock_data['Carbon Emission (kg CO2)'], 
    cmap='coolwarm', 
    alpha=0.7
)
ax.set_facecolor("black")
ax.xaxis.label.set_color('white')
ax.yaxis.label.set_color('white')
ax.tick_params(axis='x', colors='white')
ax.tick_params(axis='y', colors='white')
ax.set_xlabel('Execution Time (minutes)')
ax.set_ylabel('CPU Usage (%)')
plt.colorbar(scatter, label='Carbon Emission (kg CO2)').ax.yaxis.set_tick_params(color='white')
plt.title('Execution Time vs CPU Usage vs Carbon Emission', color='white')

# Render the plot in Streamlit
st.pyplot(fig)

# Line chart for carbon emissions with dark background
st.write("### Carbon Emission over Time")
st.line_chart(mock_data[['Carbon Emission (kg CO2)']], use_container_width=True)

# Show summary statistics
st.write("### Summary Statistics")
st.write(mock_data.describe())

# Final message
st.success("Mock CI/CD pipeline simulation complete! Check the visualizations and data above.")
