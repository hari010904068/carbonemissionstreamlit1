import streamlit as st
import numpy as np
import pandas as pd
import time
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.svm import SVR
from sklearn.metrics import mean_squared_error, r2_score
import plotly.express as px
import plotly.graph_objects as go
import matplotlib.pyplot as plt
from graphviz import Digraph

# Custom CSS for sidebar and app layout
st.markdown(
    """
    <style>
    body {
        background: url('https://cdn.pixabay.com/photo/2015/12/01/20/28/forest-1072828_1280.jpg');
        background-size: cover;
        background-attachment: fixed;
        color: white;
    }
    .stApp {
        background-color: rgba(0, 100, 0, 0.4);
    }
    h1, h2, h3, h4, h5, h6 {
        color: #d0f0c0;
    }
    .stSidebar {
        background-color: black;
        color: white;
    }
    .css-1v3fvcr {
        background-color: black;
    }
    .css-1v3fvcr .stSlider > div > div {
        background-color: black;
        color: white;
    }
    .css-1v3fvcr .stSlider > div > div > div > div {
        background-color: black;
        color: white;
    }
    </style>
    """,
    unsafe_allow_html=True
)

# Set up Matplotlib to use a black background with white text
plt.style.use('dark_background')

# Title of the app
st.title("ðŸŒ² Jenkins CI/CD Mock Execution - Carbon Emission Tracker ðŸŒ¿")
st.write("This app mocks Jenkins CI/CD execution time and CPU usage, simulates multiple models, computes linear carbon emissions, and compares them with car emissions.")

# Sidebar input widgets for mocking CI/CD parameters
st.sidebar.header("CI/CD Pipeline Mock Parameters")
execution_time = st.sidebar.slider("Execution Time (minutes)", 1, 120, 30)
cpu_usage = st.sidebar.slider("Average CPU Usage (%)", 1, 100, 50)

# Mock Jenkins CI/CD execution time and CPU usage data
data_points = 100
np.random.seed(42)
time_data = np.random.normal(loc=execution_time, scale=5, size=data_points).clip(1, 120)
cpu_data = np.random.normal(loc=cpu_usage, scale=10, size=data_points).clip(1, 100)

# Create a DataFrame for visualization
mock_data = pd.DataFrame({
    'Execution Time (minutes)': time_data,
    'CPU Usage (%)': cpu_data,
})

# Define the target variable (carbon emission)
mock_data['Carbon Emission (kg CO2)'] = (mock_data['Execution Time (minutes)'] + mock_data['CPU Usage (%)']) * 0.05

# Define car emission data
car_running_time = np.linspace(0, 120, data_points)  # Car running time from 0 to 120 minutes
car_emission = car_running_time * 0.12  # Assume 0.12 kg CO2 per minute of car running time

# Create DataFrame for car emissions
car_emission_df = pd.DataFrame({
    'Car Running Time (minutes)': car_running_time,
    'Car Emission (kg CO2)': car_emission
})

# Split data into features and target
X = mock_data[['Execution Time (minutes)', 'CPU Usage (%)']]
y = mock_data['Carbon Emission (kg CO2)']

# Simulate training models and compare them
st.subheader("ðŸ“Š Model Training and Comparison")
st.write("Multiple models are trained to predict carbon emissions based on CPU usage and execution time.")

# Train multiple models
models = {
    'Linear Regression': LinearRegression(),
    'Random Forest Regressor': RandomForestRegressor(n_estimators=100, random_state=42),
    'Support Vector Regressor': SVR(),
    'Gradient Boosting Regressor': GradientBoostingRegressor(random_state=42)
}

# Dictionary to store model performance
model_performance = {
    'Model': [],
    'Mean Squared Error (MSE)': [],
    'RÂ² Score': []
}

# Dictionary to store model predictions
model_predictions = {}

# Train each model and compute metrics
for model_name, model in models.items():
    # Train the model
    model.fit(X, y)
    # Make predictions
    y_pred = model.predict(X)
    # Compute metrics
    mse = mean_squared_error(y, y_pred)
    r2 = r2_score(y, y_pred)
    # Store results
    model_performance['Model'].append(model_name)
    model_performance['Mean Squared Error (MSE)'].append(mse)
    model_performance['RÂ² Score'].append(r2)
    # Store predictions
    model_predictions[model_name] = y_pred

# Convert the performance dictionary to a DataFrame
performance_df = pd.DataFrame(model_performance)

# Display the model comparison table
st.write("### Model Comparison")
st.dataframe(performance_df)

# Visualize predictions of each model (interactive Plotly)
st.write("### Model Prediction Visualization")
for model_name, y_pred in model_predictions.items():
    fig = px.scatter(
        x=mock_data['Execution Time (minutes)'], 
        y=mock_data['CPU Usage (%)'], 
        color=y_pred, 
        title=f'{model_name} - Execution Time vs CPU Usage vs Predicted Carbon Emission',
        labels={'x': 'Execution Time (minutes)', 'y': 'CPU Usage (%)', 'color': 'Predicted Carbon Emission (kg CO2)'},
        color_continuous_scale='Viridis',
        template='plotly_dark'
    )
    st.plotly_chart(fig, use_container_width=True)

# Bar chart for performance comparison
st.subheader("ðŸ“Š Bar Chart: Model Performance Comparison")
bar_chart = go.Figure()
bar_chart.add_trace(go.Bar(
    x=performance_df['Model'], 
    y=performance_df['Mean Squared Error (MSE)'],
    name='Mean Squared Error',
    marker_color='lightskyblue'
))
bar_chart.add_trace(go.Bar(
    x=performance_df['Model'], 
    y=performance_df['RÂ² Score'],
    name='RÂ² Score',
    marker_color='lightgreen'
))
bar_chart.update_layout(barmode='group', template='plotly_dark', title="Model Performance: MSE vs RÂ² Score")
st.plotly_chart(bar_chart, use_container_width=True)

# Design Diagram of the Logic
st.subheader("ðŸ§© Design Diagram of the App Logic")
st.write("The design diagram below illustrates the flow of data and processes in the app.")

# Create design diagram using Graphviz
design_diagram = Digraph(comment='App Logic Design')

# Define nodes in the diagram
design_diagram.node('A', 'Start')
design_diagram.node('B', 'Input CI/CD Parameters')
design_diagram.node('C', 'Generate Mock Data')
design_diagram.node('D', 'Train Models')
design_diagram.node('E', 'Evaluate Models')
design_diagram.node('F', 'Visualize Predictions')
design_diagram.node('G', 'Compare Models')
design_diagram.node('H', 'Show Flowchart')
design_diagram.node('I', 'End')

# Define edges between nodes
design_diagram.edge('A', 'B')
design_diagram.edge('B', 'C')
design_diagram.edge('C', 'D')
design_diagram.edge('D', 'E')
design_diagram.edge('E', 'F')
design_diagram.edge('F', 'G')
design_diagram.edge('G', 'H')
design_diagram.edge('H', 'I')

# Display design diagram in Streamlit
st.graphviz_chart(design_diagram)

# Compare CI/CD carbon emissions with car emissions
st.subheader("ðŸš— Comparison of Carbon Emissions: CI/CD vs Car Running Time")
st.write("This section compares the carbon emissions from the Jenkins CI/CD pipeline with emissions from a car based on running time.")

# Create a DataFrame to combine emissions for comparison
comparison_df = pd.DataFrame({
    'Execution Time (minutes)': mock_data['Execution Time (minutes)'],
    'CI/CD Emission (kg CO2)': mock_data['Carbon Emission (kg CO2)'],
    'Car Running Time (minutes)': car_running_time,
    'Car Emission (kg CO2)': car_emission
})

# Line plot comparison
fig_line = px.line(
    comparison_df,
    x='Execution Time (minutes)',
    y=['CI/CD Emission (kg CO2)', 'Car Emission (kg CO2)'],
    labels={'value': 'Carbon Emission (kg CO2)', 'variable': 'Source'},
    title='Comparison of Carbon Emissions: CI/CD vs Car Running Time',
    template='plotly_dark'
)
st.plotly_chart(fig_line, use_container_width=True)

# Bar chart for carbon emissions comparison
st.subheader("ðŸ“Š Bar Chart: Carbon Emissions Comparison")
bar_chart_emissions = go.Figure()

# Adding CI/CD emission bars
bar_chart_emissions.add_trace(go.Bar(
    x=comparison_df['Execution Time (minutes)'],
    y=comparison_df['CI/CD Emission (kg CO2)'],
    name='CI/CD Emission',
    marker_color='orange'
))

# Adding Car emission bars
bar_chart_emissions.add_trace(go.Bar(
    x=comparison_df['Car Running Time (minutes)'],
    y=comparison_df['Car Emission (kg CO2)'],
    name='Car Emission',
    marker_color='blue'
))

bar_chart_emissions.update_layout(
    title="Bar Chart: Carbon Emissions Comparison",
    xaxis_title="Time (minutes)",
    yaxis_title="Carbon Emission (kg CO2)",
    template='plotly_dark',
    barmode='group'
)

st.plotly_chart(bar_chart_emissions, use_container_width=True)

# Final message
st.success("Mock CI/CD pipeline simulation, model comparison, and design diagram complete! Check the visualizations and data above.")
